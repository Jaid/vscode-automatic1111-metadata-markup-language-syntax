import jsonPlugin from '@rollup/plugin-json';
import { Options as TerserPluginOptions } from '@rollup/plugin-terser';
import yamlPlugin from '@rollup/plugin-yaml';
import { default as publishimo } from 'publishimo';
import { Plugin, RollupBuild, RollupOptions, RollupOutput } from 'rollup';
import { AsyncSeriesHook, AsyncSeriesWaterfallHook, SyncWaterfallHook } from 'tapable';

declare const defaultOptions$1: {
	filterStrategy: "node_modules" | "pkg";
};
declare const defaultOptions$2: {
	jsonOptions: false | jsonPlugin.RollupJsonOptions | undefined;
};
declare const defaultOptions$3: {
	terserPreset: "default" | "aggressive";
};
declare const defaultOptions$4: {
	includeFields: string[];
};
declare const defaultOptions$5: {
	compiler: "typescript" | "swc" | "rollup-plugin-ts" | "sucrase";
	rewriteEntry: boolean;
	declarationEmitter: false | "dts-bundle-generator" | "rollup-plugin-dts" | undefined;
	declarationOnlyForProduction: boolean;
	declarationFile: string;
};
declare const defaultOptions$6: {
	sort: boolean;
	generatorBanner: boolean;
	inlinedImports: string[];
	outputFile: string;
};
declare const defaultOptions$7: {
	content: string | Uint8Array;
};
declare const defaultOptions$8: {
	pretty: boolean;
};
declare const defaultOptions: {
	contextFolder: string;
	env: string;
	outputFolder: string;
	useDefaultPlugins: boolean;
	minify: boolean | "aggressive";
	externals: false | "node_modules" | "pkg" | undefined;
};
declare const emptyObjectSymbol: unique symbol;
declare function dtsBundleGeneratorPlugin(pluginOptions?: Options$8["parameter"]): Plugin;
declare function publishimoPlugin$1(pluginOptions?: Options$10["parameter"]): Plugin;
declare function publishimoPlugin(pluginOptions: Options$9["parameter"]): Plugin;
declare namespace PackageJson {
	/**
	A person who has been involved in creating or maintaining the package.
	*/
	export type Person = string | {
		name: string;
		url?: string;
		email?: string;
	};
	export type BugsLocation = string | {
		/**
		The URL to the package's issue tracker.
		*/
		url?: string;
		/**
		The email address to which issues should be reported.
		*/
		email?: string;
	};
	export type DirectoryLocations = {
		[directoryType: string]: JsonValue | undefined;
		/**
		Location for executable scripts. Sugar to generate entries in the `bin` property by walking the folder.
		*/
		bin?: string;
		/**
		Location for Markdown files.
		*/
		doc?: string;
		/**
		Location for example scripts.
		*/
		example?: string;
		/**
		Location for the bulk of the library.
		*/
		lib?: string;
		/**
		Location for man pages. Sugar to generate a `man` array by walking the folder.
		*/
		man?: string;
		/**
		Location for test files.
		*/
		test?: string;
	};
	export type Scripts = {
		/**
		Run **before** the package is published (Also run on local `npm install` without any arguments).
		*/
		prepublish?: string;
		/**
		Run both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`.
		*/
		prepare?: string;
		/**
		Run **before** the package is prepared and packed, **only** on `npm publish`.
		*/
		prepublishOnly?: string;
		/**
		Run **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies).
		*/
		prepack?: string;
		/**
		Run **after** the tarball has been generated and moved to its final destination.
		*/
		postpack?: string;
		/**
		Run **after** the package is published.
		*/
		publish?: string;
		/**
		Run **after** the package is published.
		*/
		postpublish?: string;
		/**
		Run **before** the package is installed.
		*/
		preinstall?: string;
		/**
		Run **after** the package is installed.
		*/
		install?: string;
		/**
		Run **after** the package is installed and after `install`.
		*/
		postinstall?: string;
		/**
		Run **before** the package is uninstalled and before `uninstall`.
		*/
		preuninstall?: string;
		/**
		Run **before** the package is uninstalled.
		*/
		uninstall?: string;
		/**
		Run **after** the package is uninstalled.
		*/
		postuninstall?: string;
		/**
		Run **before** bump the package version and before `version`.
		*/
		preversion?: string;
		/**
		Run **before** bump the package version.
		*/
		version?: string;
		/**
		Run **after** bump the package version.
		*/
		postversion?: string;
		/**
		Run with the `npm test` command, before `test`.
		*/
		pretest?: string;
		/**
		Run with the `npm test` command.
		*/
		test?: string;
		/**
		Run with the `npm test` command, after `test`.
		*/
		posttest?: string;
		/**
		Run with the `npm stop` command, before `stop`.
		*/
		prestop?: string;
		/**
		Run with the `npm stop` command.
		*/
		stop?: string;
		/**
		Run with the `npm stop` command, after `stop`.
		*/
		poststop?: string;
		/**
		Run with the `npm start` command, before `start`.
		*/
		prestart?: string;
		/**
		Run with the `npm start` command.
		*/
		start?: string;
		/**
		Run with the `npm start` command, after `start`.
		*/
		poststart?: string;
		/**
		Run with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.
		*/
		prerestart?: string;
		/**
		Run with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.
		*/
		restart?: string;
		/**
		Run with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.
		*/
		postrestart?: string;
	} & Partial<Record<string, string>>;
	/**
	Dependencies of the package. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or Git URL.
	*/
	export type Dependency = Partial<Record<string, string>>;
	/**
	A mapping of conditions and the paths to which they resolve.
	*/
	type ExportConditions = {
		[condition: string]: Exports;
	};
	/**
	Entry points of a module, optionally with conditions and subpath exports.
	*/
	export type Exports = null | string | Array<string | ExportConditions> | ExportConditions;
	/**
	Import map entries of a module, optionally with conditions and subpath imports.
	*/
	export type Imports = {
		[key: `#${string}`]: Exports;
	};
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions
	export interface NonStandardEntryPoints {
		/**
		An ECMAScript module ID that is the primary entry point to the program.
		*/
		module?: string;
		/**
		A module ID with untranspiled code that is the primary entry point to the program.
		*/
		esnext?: string | {
			[moduleName: string]: string | undefined;
			main?: string;
			browser?: string;
		};
		/**
		A hint to JavaScript bundlers or component tools when packaging modules for client side use.
		*/
		browser?: string | Partial<Record<string, string | false>>;
		/**
		Denote which files in your project are "pure" and therefore safe for Webpack to prune if unused.

		[Read more.](https://webpack.js.org/guides/tree-shaking/)
		*/
		sideEffects?: boolean | string[];
	}
	export type TypeScriptConfiguration = {
		/**
		Location of the bundled TypeScript declaration file.
		*/
		types?: string;
		/**
		Version selection map of TypeScript.
		*/
		typesVersions?: Partial<Record<string, Partial<Record<string, string[]>>>>;
		/**
		Location of the bundled TypeScript declaration file. Alias of `types`.
		*/
		typings?: string;
	};
	/**
	An alternative configuration for workspaces.
	*/
	export type WorkspaceConfig = {
		/**
		An array of workspace pattern strings which contain the workspace packages.
		*/
		packages?: WorkspacePattern[];
		/**
		Designed to solve the problem of packages which break when their `node_modules` are moved to the root workspace directory - a process known as hoisting. For these packages, both within your workspace, and also some that have been installed via `node_modules`, it is important to have a mechanism for preventing the default Yarn workspace behavior. By adding workspace pattern strings here, Yarn will resume non-workspace behavior for any package which matches the defined patterns.

		[Supported](https://classic.yarnpkg.com/blog/2018/02/15/nohoist/) by Yarn.
		[Not supported](https://github.com/npm/rfcs/issues/287) by npm.
		*/
		nohoist?: WorkspacePattern[];
	};
	/**
	A workspace pattern points to a directory or group of directories which contain packages that should be included in the workspace installation process.

	The patterns are handled with [minimatch](https://github.com/isaacs/minimatch).

	@example
	`docs` → Include the docs directory and install its dependencies.
	`packages/*` → Include all nested directories within the packages directory, like `packages/cli` and `packages/core`.
	*/
	type WorkspacePattern = string;
	export type YarnConfiguration = {
		/**
		If your package only allows one version of a given dependency, and you’d like to enforce the same behavior as `yarn install --flat` on the command-line, set this to `true`.

		Note that if your `package.json` contains `"flat": true` and other packages depend on yours (e.g. you are building a library rather than an app), those other packages will also need `"flat": true` in their `package.json` or be installed with `yarn install --flat` on the command-line.
		*/
		flat?: boolean;
		/**
		Selective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file.
		*/
		resolutions?: Dependency;
	};
	export type JSPMConfiguration = {
		/**
		JSPM configuration.
		*/
		jspm?: PackageJson;
	};
	/**
	Type for [npm's `package.json` file](https://docs.npmjs.com/creating-a-package-json-file). Containing standard npm properties.
	*/
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions
	export interface PackageJsonStandard {
		/**
		The name of the package.
		*/
		name?: string;
		/**
		Package version, parseable by [`node-semver`](https://github.com/npm/node-semver).
		*/
		version?: string;
		/**
		Package description, listed in `npm search`.
		*/
		description?: string;
		/**
		Keywords associated with package, listed in `npm search`.
		*/
		keywords?: string[];
		/**
		The URL to the package's homepage.
		*/
		homepage?: LiteralUnion<".", string>;
		/**
		The URL to the package's issue tracker and/or the email address to which issues should be reported.
		*/
		bugs?: BugsLocation;
		/**
		The license for the package.
		*/
		license?: string;
		/**
		The licenses for the package.
		*/
		licenses?: Array<{
			type?: string;
			url?: string;
		}>;
		author?: Person;
		/**
		A list of people who contributed to the package.
		*/
		contributors?: Person[];
		/**
		A list of people who maintain the package.
		*/
		maintainers?: Person[];
		/**
		The files included in the package.
		*/
		files?: string[];
		/**
		Resolution algorithm for importing ".js" files from the package's scope.

		[Read more.](https://nodejs.org/api/esm.html#esm_package_json_type_field)
		*/
		type?: "module" | "commonjs";
		/**
		The module ID that is the primary entry point to the program.
		*/
		main?: string;
		/**
		Subpath exports to define entry points of the package.

		[Read more.](https://nodejs.org/api/packages.html#subpath-exports)
		*/
		exports?: Exports;
		/**
		Subpath imports to define internal package import maps that only apply to import specifiers from within the package itself.

		[Read more.](https://nodejs.org/api/packages.html#subpath-imports)
		*/
		imports?: Imports;
		/**
		The executable files that should be installed into the `PATH`.
		*/
		bin?: string | Partial<Record<string, string>>;
		/**
		Filenames to put in place for the `man` program to find.
		*/
		man?: string | string[];
		/**
		Indicates the structure of the package.
		*/
		directories?: DirectoryLocations;
		/**
		Location for the code repository.
		*/
		repository?: string | {
			type: string;
			url: string;
			/**
			Relative path to package.json if it is placed in non-root directory (for example if it is part of a monorepo).

			[Read more.](https://github.com/npm/rfcs/blob/latest/implemented/0010-monorepo-subdirectory-declaration.md)
			*/
			directory?: string;
		};
		/**
		Script commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point.
		*/
		scripts?: Scripts;
		/**
		Is used to set configuration parameters used in package scripts that persist across upgrades.
		*/
		config?: JsonObject;
		/**
		The dependencies of the package.
		*/
		dependencies?: Dependency;
		/**
		Additional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling.
		*/
		devDependencies?: Dependency;
		/**
		Dependencies that are skipped if they fail to install.
		*/
		optionalDependencies?: Dependency;
		/**
		Dependencies that will usually be required by the package user directly or via another dependency.
		*/
		peerDependencies?: Dependency;
		/**
		Indicate peer dependencies that are optional.
		*/
		peerDependenciesMeta?: Partial<Record<string, {
			optional: true;
		}>>;
		/**
		Package names that are bundled when the package is published.
		*/
		bundledDependencies?: string[];
		/**
		Alias of `bundledDependencies`.
		*/
		bundleDependencies?: string[];
		/**
		Engines that this package runs on.
		*/
		engines?: {
			[EngineName in "npm" | "node" | string]?: string;
		};
		/**
		@deprecated
		*/
		engineStrict?: boolean;
		/**
		Operating systems the module runs on.
		*/
		os?: Array<LiteralUnion<"aix" | "darwin" | "freebsd" | "linux" | "openbsd" | "sunos" | "win32" | "!aix" | "!darwin" | "!freebsd" | "!linux" | "!openbsd" | "!sunos" | "!win32", string>>;
		/**
		CPU architectures the module runs on.
		*/
		cpu?: Array<LiteralUnion<"arm" | "arm64" | "ia32" | "mips" | "mipsel" | "ppc" | "ppc64" | "s390" | "s390x" | "x32" | "x64" | "!arm" | "!arm64" | "!ia32" | "!mips" | "!mipsel" | "!ppc" | "!ppc64" | "!s390" | "!s390x" | "!x32" | "!x64", string>>;
		/**
		If set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.

		@deprecated
		*/
		preferGlobal?: boolean;
		/**
		If set to `true`, then npm will refuse to publish it.
		*/
		private?: boolean;
		/**
		A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default.
		*/
		publishConfig?: PublishConfig;
		/**
		Describes and notifies consumers of a package's monetary support information.

		[Read more.](https://github.com/npm/rfcs/blob/latest/accepted/0017-add-funding-support.md)
		*/
		funding?: string | {
			/**
			The type of funding.
			*/
			type?: LiteralUnion<"github" | "opencollective" | "patreon" | "individual" | "foundation" | "corporation", string>;
			/**
			The URL to the funding page.
			*/
			url: string;
		};
		/**
		Used to configure [npm workspaces](https://docs.npmjs.com/cli/using-npm/workspaces) / [Yarn workspaces](https://classic.yarnpkg.com/docs/workspaces/).

		Workspaces allow you to manage multiple packages within the same repository in such a way that you only need to run your install command once in order to install all of them in a single pass.

		Please note that the top-level `private` property of `package.json` **must** be set to `true` in order to use workspaces.
		*/
		workspaces?: WorkspacePattern[] | WorkspaceConfig;
	}
	/**
	Type for [`package.json` file used by the Node.js runtime](https://nodejs.org/api/packages.html#nodejs-packagejson-field-definitions).
	*/
	export type NodeJsStandard = {
		/**
		Defines which package manager is expected to be used when working on the current project. It can set to any of the [supported package managers](https://nodejs.org/api/corepack.html#supported-package-managers), and will ensure that your teams use the exact same package manager versions without having to install anything else than Node.js.

		__This field is currently experimental and needs to be opted-in; check the [Corepack](https://nodejs.org/api/corepack.html) page for details about the procedure.__

		@example
		```json
		{
			"packageManager": "<package manager name>@<version>"
		}
		```
		*/
		packageManager?: string;
	};
	export type PublishConfig = {
		/**
		Additional, less common properties from the [npm docs on `publishConfig`](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#publishconfig).
		*/
		[additionalProperties: string]: JsonValue | undefined;
		/**
		When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set `--access=public`. The only valid values for access are public and restricted. Unscoped packages always have an access level of public.
		*/
		access?: "public" | "restricted";
		/**
		The base URL of the npm registry.

		Default: `'https://registry.npmjs.org/'`
		*/
		registry?: string;
		/**
		The tag to publish the package under.

		Default: `'latest'`
		*/
		tag?: string;
	};
}
declare namespace TsConfigJson {
	namespace CompilerOptions {
		export type JSX = "preserve" | "react" | "react-jsx" | "react-jsxdev" | "react-native";
		export type Module = "CommonJS" | "AMD" | "System" | "UMD" | "ES6" | "ES2015" | "ES2020" | "ES2022" | "ESNext" | "Node16" | "NodeNext" | "None"
		// Lowercase alternatives
		 | "commonjs" | "amd" | "system" | "umd" | "es6" | "es2015" | "es2020" | "es2022" | "esnext" | "node16" | "nodenext" | "none";
		export type NewLine = "CRLF" | "LF"
		// Lowercase alternatives
		 | "crlf" | "lf";
		export type Target = "ES3" | "ES5" | "ES6" | "ES2015" | "ES2016" | "ES2017" | "ES2018" | "ES2019" | "ES2020" | "ES2021" | "ES2022" | "ESNext"
		// Lowercase alternatives
		 | "es3" | "es5" | "es6" | "es2015" | "es2016" | "es2017" | "es2018" | "es2019" | "es2020" | "es2021" | "es2022" | "esnext";
		// eslint-disable-next-line unicorn/prevent-abbreviations
		export type Lib = "ES5" | "ES6" | "ES7" | "ES2015" | "ES2015.Collection" | "ES2015.Core" | "ES2015.Generator" | "ES2015.Iterable" | "ES2015.Promise" | "ES2015.Proxy" | "ES2015.Reflect" | "ES2015.Symbol.WellKnown" | "ES2015.Symbol" | "ES2016" | "ES2016.Array.Include" | "ES2017" | "ES2017.Intl" | "ES2017.Object" | "ES2017.SharedMemory" | "ES2017.String" | "ES2017.TypedArrays" | "ES2018" | "ES2018.AsyncGenerator" | "ES2018.AsyncIterable" | "ES2018.Intl" | "ES2018.Promise" | "ES2018.Regexp" | "ES2019" | "ES2019.Array" | "ES2019.Object" | "ES2019.String" | "ES2019.Symbol" | "ES2020" | "ES2020.BigInt" | "ES2020.Promise" | "ES2020.String" | "ES2020.Symbol.WellKnown" | "ES2020.SharedMemory" | "ES2020.Intl" | "ES2021" | "ES2021.Promise" | "ES2021.String" | "ES2021.WeakRef" | "ESNext" | "ESNext.Array" | "ESNext.AsyncIterable" | "ESNext.BigInt" | "ESNext.Intl" | "ESNext.Promise" | "ESNext.String" | "ESNext.Symbol" | "ESNext.WeakRef" | "DOM" | "DOM.Iterable" | "ScriptHost" | "WebWorker" | "WebWorker.ImportScripts" | "WebWorker.Iterable"
		// Lowercase alternatives
		 | "es5" | "es6" | "es7" | "es2015" | "es2015.collection" | "es2015.core" | "es2015.generator" | "es2015.iterable" | "es2015.promise" | "es2015.proxy" | "es2015.reflect" | "es2015.symbol.wellknown" | "es2015.symbol" | "es2016" | "es2016.array.include" | "es2017" | "es2017.intl" | "es2017.object" | "es2017.sharedmemory" | "es2017.string" | "es2017.typedarrays" | "es2018" | "es2018.asyncgenerator" | "es2018.asynciterable" | "es2018.intl" | "es2018.promise" | "es2018.regexp" | "es2019" | "es2019.array" | "es2019.object" | "es2019.string" | "es2019.symbol" | "es2020" | "es2020.bigint" | "es2020.promise" | "es2020.string" | "es2020.symbol.wellknown" | "es2020.sharedmemory" | "es2020.intl" | "es2021" | "es2021.promise" | "es2021.string" | "es2021.weakref" | "esnext" | "esnext.array" | "esnext.asynciterable" | "esnext.bigint" | "esnext.intl" | "esnext.promise" | "esnext.string" | "esnext.symbol" | "esnext.weakref" | "dom" | "dom.iterable" | "scripthost" | "webworker" | "webworker.importscripts" | "webworker.iterable";
		export type Plugin = {
			/**
			Plugin name.
			*/
			name: string;
		};
		export type ImportsNotUsedAsValues = "remove" | "preserve" | "error";
		export type FallbackPolling = "fixedPollingInterval" | "priorityPollingInterval" | "dynamicPriorityPolling" | "fixedInterval" | "priorityInterval" | "dynamicPriority" | "fixedChunkSize";
		export type WatchDirectory = "useFsEvents" | "fixedPollingInterval" | "dynamicPriorityPolling" | "fixedChunkSizePolling";
		export type WatchFile = "fixedPollingInterval" | "priorityPollingInterval" | "dynamicPriorityPolling" | "useFsEvents" | "useFsEventsOnParentDirectory" | "fixedChunkSizePolling";
		export type ModuleResolution = "classic" | "node" | "node10" | "node16" | "nodenext" | "bundler"
		// Pascal-cased alternatives
		 | "Classic" | "Node" | "Node10" | "Node16" | "NodeNext" | "Bundler";
		export type ModuleDetection = "auto" | "legacy" | "force";
		export type IgnoreDeprecations = "5.0";
	}
	export type CompilerOptions = {
		/**
		The character set of the input files.

		@default 'utf8'
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		charset?: string;
		/**
		Enables building for project references.

		@default true
		*/
		composite?: boolean;
		/**
		Generates corresponding d.ts files.

		@default false
		*/
		declaration?: boolean;
		/**
		Specify output directory for generated declaration files.
		*/
		declarationDir?: string;
		/**
		Show diagnostic information.

		@default false
		*/
		diagnostics?: boolean;
		/**
		Reduce the number of projects loaded automatically by TypeScript.

		@default false
		*/
		disableReferencedProjectLoad?: boolean;
		/**
		Enforces using indexed accessors for keys declared using an indexed type.

		@default false
		*/
		noPropertyAccessFromIndexSignature?: boolean;
		/**
		Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.

		@default false
		*/
		emitBOM?: boolean;
		/**
		Only emit `.d.ts` declaration files.

		@default false
		*/
		emitDeclarationOnly?: boolean;
		/**
		Differentiate between undefined and not present when type checking.

		@default false
		*/
		exactOptionalPropertyTypes?: boolean;
		/**
		Enable incremental compilation.

		@default `composite`
		*/
		incremental?: boolean;
		/**
		Specify file to store incremental compilation information.

		@default '.tsbuildinfo'
		*/
		tsBuildInfoFile?: string;
		/**
		Emit a single file with source maps instead of having a separate file.

		@default false
		*/
		inlineSourceMap?: boolean;
		/**
		Emit the source alongside the sourcemaps within a single file.

		Requires `--inlineSourceMap` to be set.

		@default false
		*/
		inlineSources?: boolean;
		/**
		Specify what JSX code is generated.

		@default 'preserve'
		*/
		jsx?: CompilerOptions.JSX;
		/**
		Specifies the object invoked for `createElement` and `__spread` when targeting `'react'` JSX emit.

		@default 'React'
		*/
		reactNamespace?: string;
		/**
		Specify the JSX factory function to use when targeting React JSX emit, e.g. `React.createElement` or `h`.

		@default 'React.createElement'
		*/
		jsxFactory?: string;
		/**
		Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.

		@default 'React.Fragment'
		*/
		jsxFragmentFactory?: string;
		/**
		Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.

		@default 'react'
		*/
		jsxImportSource?: string;
		/**
		Print names of files part of the compilation.

		@default false
		*/
		listFiles?: boolean;
		/**
		Specifies the location where debugger should locate map files instead of generated locations.
		*/
		mapRoot?: string;
		/**
		Specify module code generation: 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6', 'ES2015' or 'ESNext'. Only 'AMD' and 'System' can be used in conjunction with `--outFile`. 'ES6' and 'ES2015' values may be used when targeting 'ES5' or lower.

		@default ['ES3', 'ES5'].includes(target) ? 'CommonJS' : 'ES6'
		*/
		module?: CompilerOptions.Module;
		/**
		Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6).

		@default ['AMD', 'System', 'ES6'].includes(module) ? 'classic' : 'node'
		*/
		moduleResolution?: CompilerOptions.ModuleResolution;
		/**
		Specifies the end of line sequence to be used when emitting files: 'crlf' (Windows) or 'lf' (Unix).

		@default 'LF'
		*/
		newLine?: CompilerOptions.NewLine;
		/**
		Do not emit output.

		@default false
		*/
		noEmit?: boolean;
		/**
		Do not generate custom helper functions like `__extends` in compiled output.

		@default false
		*/
		noEmitHelpers?: boolean;
		/**
		Do not emit outputs if any type checking errors were reported.

		@default false
		*/
		noEmitOnError?: boolean;
		/**
		Warn on expressions and declarations with an implied 'any' type.

		@default false
		*/
		noImplicitAny?: boolean;
		/**
		Raise error on 'this' expressions with an implied any type.

		@default false
		*/
		noImplicitThis?: boolean;
		/**
		Report errors on unused locals.

		@default false
		*/
		noUnusedLocals?: boolean;
		/**
		Report errors on unused parameters.

		@default false
		*/
		noUnusedParameters?: boolean;
		/**
		Do not include the default library file (lib.d.ts).

		@default false
		*/
		noLib?: boolean;
		/**
		Do not add triple-slash references or module import targets to the list of compiled files.

		@default false
		*/
		noResolve?: boolean;
		/**
		Disable strict checking of generic signatures in function types.

		@default false
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		noStrictGenericChecks?: boolean;
		/**
		@deprecated use `skipLibCheck` instead.
		*/
		skipDefaultLibCheck?: boolean;
		/**
		Skip type checking of declaration files.

		@default false
		*/
		skipLibCheck?: boolean;
		/**
		Concatenate and emit output to single file.
		*/
		outFile?: string;
		/**
		Redirect output structure to the directory.
		*/
		outDir?: string;
		/**
		Do not erase const enum declarations in generated code.

		@default false
		*/
		preserveConstEnums?: boolean;
		/**
		Do not resolve symlinks to their real path; treat a symlinked file like a real one.

		@default false
		*/
		preserveSymlinks?: boolean;
		/**
		Keep outdated console output in watch mode instead of clearing the screen.

		@default false
		*/
		preserveWatchOutput?: boolean;
		/**
		Stylize errors and messages using color and context (experimental).

		@default true // Unless piping to another program or redirecting output to a file.
		*/
		pretty?: boolean;
		/**
		Do not emit comments to output.

		@default false
		*/
		removeComments?: boolean;
		/**
		Specifies the root directory of input files.

		Use to control the output directory structure with `--outDir`.
		*/
		rootDir?: string;
		/**
		Unconditionally emit imports for unresolved files.

		@default false
		*/
		isolatedModules?: boolean;
		/**
		Generates corresponding '.map' file.

		@default false
		*/
		sourceMap?: boolean;
		/**
		Specifies the location where debugger should locate TypeScript files instead of source locations.
		*/
		sourceRoot?: string;
		/**
		Suppress excess property checks for object literals.

		@default false
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		suppressExcessPropertyErrors?: boolean;
		/**
		Suppress noImplicitAny errors for indexing objects lacking index signatures.

		@default false
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		suppressImplicitAnyIndexErrors?: boolean;
		/**
		Do not emit declarations for code that has an `@internal` annotation.
		*/
		stripInternal?: boolean;
		/**
		Specify ECMAScript target version.

		@default 'es3'
		*/
		target?: CompilerOptions.Target;
		/**
		Default catch clause variables as `unknown` instead of `any`.

		@default false
		*/
		useUnknownInCatchVariables?: boolean;
		/**
		Watch input files.

		@default false
		@deprecated Use watchOptions instead.
		*/
		watch?: boolean;
		/**
		Specify the polling strategy to use when the system runs out of or doesn't support native file watchers.

		@deprecated Use watchOptions.fallbackPolling instead.
		*/
		fallbackPolling?: CompilerOptions.FallbackPolling;
		/**
		Specify the strategy for watching directories under systems that lack recursive file-watching functionality.

		@default 'useFsEvents'
		@deprecated Use watchOptions.watchDirectory instead.
		*/
		watchDirectory?: CompilerOptions.WatchDirectory;
		/**
		Specify the strategy for watching individual files.

		@default 'useFsEvents'
		@deprecated Use watchOptions.watchFile instead.
		*/
		watchFile?: CompilerOptions.WatchFile;
		/**
		Enables experimental support for ES7 decorators.

		@default false
		*/
		experimentalDecorators?: boolean;
		/**
		Emit design-type metadata for decorated declarations in source.

		@default false
		*/
		emitDecoratorMetadata?: boolean;
		/**
		Do not report errors on unused labels.

		@default false
		*/
		allowUnusedLabels?: boolean;
		/**
		Report error when not all code paths in function return a value.

		@default false
		*/
		noImplicitReturns?: boolean;
		/**
		Add `undefined` to a type when accessed using an index.

		@default false
		*/
		noUncheckedIndexedAccess?: boolean;
		/**
		Report errors for fallthrough cases in switch statement.

		@default false
		*/
		noFallthroughCasesInSwitch?: boolean;
		/**
		Ensure overriding members in derived classes are marked with an override modifier.

		@default false
		*/
		noImplicitOverride?: boolean;
		/**
		Do not report errors on unreachable code.

		@default false
		*/
		allowUnreachableCode?: boolean;
		/**
		Disallow inconsistently-cased references to the same file.

		@default true
		*/
		forceConsistentCasingInFileNames?: boolean;
		/**
		Emit a v8 CPU profile of the compiler run for debugging.

		@default 'profile.cpuprofile'
		*/
		generateCpuProfile?: string;
		/**
		Base directory to resolve non-relative module names.
		*/
		baseUrl?: string;
		/**
		Specify path mapping to be computed relative to baseUrl option.
		*/
		paths?: Record<string, string[]>;
		/**
		List of TypeScript language server plugins to load.
		*/
		plugins?: CompilerOptions.Plugin[];
		/**
		Specify list of root directories to be used when resolving modules.
		*/
		rootDirs?: string[];
		/**
		Specify list of directories for type definition files to be included.
		*/
		typeRoots?: string[];
		/**
		Type declaration files to be included in compilation.
		*/
		types?: string[];
		/**
		Enable tracing of the name resolution process.

		@default false
		*/
		traceResolution?: boolean;
		/**
		Allow javascript files to be compiled.

		@default false
		*/
		allowJs?: boolean;
		/**
		Do not truncate error messages.

		@default false
		*/
		noErrorTruncation?: boolean;
		/**
		Allow default imports from modules with no default export. This does not affect code emit, just typechecking.

		@default module === 'system' || esModuleInterop
		*/
		allowSyntheticDefaultImports?: boolean;
		/**
		Do not emit `'use strict'` directives in module output.

		@default false
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		noImplicitUseStrict?: boolean;
		/**
		Enable to list all emitted files.

		@default false
		*/
		listEmittedFiles?: boolean;
		/**
		Disable size limit for JavaScript project.

		@default false
		*/
		disableSizeLimit?: boolean;
		/**
		List of library files to be included in the compilation.
		*/
		lib?: CompilerOptions.Lib[];
		/**
		Enable strict null checks.

		@default false
		*/
		strictNullChecks?: boolean;
		/**
		The maximum dependency depth to search under `node_modules` and load JavaScript files. Only applicable with `--allowJs`.

		@default 0
		*/
		maxNodeModuleJsDepth?: number;
		/**
		Import emit helpers (e.g. `__extends`, `__rest`, etc..) from tslib.

		@default false
		*/
		importHelpers?: boolean;
		/**
		Specify emit/checking behavior for imports that are only used for types.

		@default 'remove'
		@deprecated Use `verbatimModuleSyntax` instead.
		*/
		importsNotUsedAsValues?: CompilerOptions.ImportsNotUsedAsValues;
		/**
		Parse in strict mode and emit `'use strict'` for each source file.

		@default false
		*/
		alwaysStrict?: boolean;
		/**
		Enable all strict type checking options.

		@default false
		*/
		strict?: boolean;
		/**
		Enable stricter checking of of the `bind`, `call`, and `apply` methods on functions.

		@default false
		*/
		strictBindCallApply?: boolean;
		/**
		Provide full support for iterables in `for-of`, spread, and destructuring when targeting `ES5` or `ES3`.

		@default false
		*/
		downlevelIteration?: boolean;
		/**
		Report errors in `.js` files.

		@default false
		*/
		checkJs?: boolean;
		/**
		Disable bivariant parameter checking for function types.

		@default false
		*/
		strictFunctionTypes?: boolean;
		/**
		Ensure non-undefined class properties are initialized in the constructor.

		@default false
		*/
		strictPropertyInitialization?: boolean;
		/**
		Emit `__importStar` and `__importDefault` helpers for runtime Babel ecosystem compatibility and enable `--allowSyntheticDefaultImports` for typesystem compatibility.

		@default false
		*/
		esModuleInterop?: boolean;
		/**
		Allow accessing UMD globals from modules.

		@default false
		*/
		allowUmdGlobalAccess?: boolean;
		/**
		Resolve `keyof` to string valued property names only (no numbers or symbols).

		@default false
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		keyofStringsOnly?: boolean;
		/**
		Emit ECMAScript standard class fields.

		@default false
		*/
		useDefineForClassFields?: boolean;
		/**
		Generates a sourcemap for each corresponding `.d.ts` file.

		@default false
		*/
		declarationMap?: boolean;
		/**
		Include modules imported with `.json` extension.

		@default false
		*/
		resolveJsonModule?: boolean;
		/**
		Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it.

		@default false
		*/
		assumeChangesOnlyAffectDirectDependencies?: boolean;
		/**
		Output more detailed compiler performance information after building.

		@default false
		*/
		extendedDiagnostics?: boolean;
		/**
		Print names of files that are part of the compilation and then stop processing.

		@default false
		*/
		listFilesOnly?: boolean;
		/**
		Disable preferring source files instead of declaration files when referencing composite projects.

		@default true if composite, false otherwise
		*/
		disableSourceOfProjectReferenceRedirect?: boolean;
		/**
		Opt a project out of multi-project reference checking when editing.

		@default false
		*/
		disableSolutionSearching?: boolean;
		/**
		Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.

		@default false
		*/
		explainFiles?: boolean;
		/**
		Preserve unused imported values in the JavaScript output that would otherwise be removed.

		@default true
		@deprecated Use `verbatimModuleSyntax` instead.
		*/
		preserveValueImports?: boolean;
		/**
		List of file name suffixes to search when resolving a module.
		*/
		moduleSuffixes?: string[];
		/**
		Control what method is used to detect module-format JS files.

		@default 'auto'
		*/
		moduleDetection?: CompilerOptions.ModuleDetection;
		/**
		Allows TypeScript files to import each other with a TypeScript-specific extension like .ts, .mts, or .tsx.

		@default false
		*/
		allowImportingTsExtensions?: boolean;
		/**
		Forces TypeScript to consult the exports field of package.json files if it ever reads from a package in node_modules.

		@default false
		*/
		resolvePackageJsonExports?: boolean;
		/**
		Forces TypeScript to consult the imports field of package.json files when performing a lookup that starts with # from a file whose ancestor directory contains a package.json.

		@default false
		*/
		resolvePackageJsonImports?: boolean;
		/**
		Suppress errors for file formats that TypeScript does not understand.

		@default false
		*/
		allowArbitraryExtensions?: boolean;
		/**
		List of additional conditions that should succeed when TypeScript resolves from package.json.
		*/
		customConditions?: string[];
		/**
		Anything that uses the type modifier is dropped entirely.

		@default false
		*/
		verbatimModuleSyntax?: boolean;
		/**
		Suppress deprecation warnings
		*/
		ignoreDeprecations?: CompilerOptions.IgnoreDeprecations;
	};
	namespace WatchOptions {
		export type WatchFileKind = "FixedPollingInterval" | "PriorityPollingInterval" | "DynamicPriorityPolling" | "FixedChunkSizePolling" | "UseFsEvents" | "UseFsEventsOnParentDirectory";
		export type WatchDirectoryKind = "UseFsEvents" | "FixedPollingInterval" | "DynamicPriorityPolling" | "FixedChunkSizePolling";
		export type PollingWatchKind = "FixedInterval" | "PriorityInterval" | "DynamicPriority" | "FixedChunkSize";
	}
	export type WatchOptions = {
		/**
		Specify the strategy for watching individual files.

		@default 'UseFsEvents'
		*/
		watchFile?: WatchOptions.WatchFileKind | Lowercase<WatchOptions.WatchFileKind>;
		/**
		Specify the strategy for watching directories under systems that lack recursive file-watching functionality.

		@default 'UseFsEvents'
		*/
		watchDirectory?: WatchOptions.WatchDirectoryKind | Lowercase<WatchOptions.WatchDirectoryKind>;
		/**
		Specify the polling strategy to use when the system runs out of or doesn't support native file watchers.
		*/
		fallbackPolling?: WatchOptions.PollingWatchKind | Lowercase<WatchOptions.PollingWatchKind>;
		/**
		Enable synchronous updates on directory watchers for platforms that don't support recursive watching natively.
		*/
		synchronousWatchDirectory?: boolean;
		/**
		Specifies a list of directories to exclude from watch
		*/
		excludeDirectories?: string[];
		/**
		Specifies a list of files to exclude from watch
		*/
		excludeFiles?: string[];
	};
	/**
	Auto type (.d.ts) acquisition options for this project.
	*/
	export type TypeAcquisition = {
		/**
		Enable auto type acquisition.
		*/
		enable?: boolean;
		/**
		Specifies a list of type declarations to be included in auto type acquisition. For example, `['jquery', 'lodash']`.
		*/
		include?: string[];
		/**
		Specifies a list of type declarations to be excluded from auto type acquisition. For example, `['jquery', 'lodash']`.
		*/
		exclude?: string[];
	};
	export type References = {
		/**
		A normalized path on disk.
		*/
		path: string;
		/**
		The path as the user originally wrote it.
		*/
		originalPath?: string;
		/**
		True if the output of this reference should be prepended to the output of this project.

		Only valid for `--outFile` compilations.
		@deprecated This option will be removed in TypeScript 5.5.
		*/
		prepend?: boolean;
		/**
		True if it is intended that this reference form a circularity.
		*/
		circular?: boolean;
	};
}
export declare class CommonPlugin implements ConfigBuilderPlugin {
	protected options: Options$2["merged"];
	constructor(options?: Options$2["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare class CommonjsPlugin implements ConfigBuilderPlugin {
	protected options: Options$1["merged"];
	constructor(options?: Options$1["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare class ConfigBuilder {
	#private;
	contextFolder: string;
	hooks: {
		finalizeOptions: SyncWaterfallHook<[
			{
				contextFolder: string;
				env: string;
				outputFolder: string;
				useDefaultPlugins: boolean;
				minify: boolean | "aggressive";
				externals: false | "node_modules" | "pkg" | undefined;
				plugins?: ConfigBuilderPlugin[] | undefined;
			}
		], import("tapable").UnsetAdditionalOptions>;
		init: AsyncSeriesHook<[
			ConfigBuilder
		], import("tapable").UnsetAdditionalOptions>;
		processPkg: AsyncSeriesWaterfallHook<[
			PackageJson
		], import("tapable").UnsetAdditionalOptions>;
		processTsconfig: AsyncSeriesWaterfallHook<[
			TsConfigJson
		], import("tapable").UnsetAdditionalOptions>;
		beforeBuild: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		build: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		buildDevelopment: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		buildProduction: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		buildStatic: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		buildWatch: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		afterBuild: AsyncSeriesHook<[
		], import("tapable").UnsetAdditionalOptions>;
		finalizeConfig: AsyncSeriesWaterfallHook<[
			RollupOptions
		], import("tapable").UnsetAdditionalOptions>;
	};
	options: Options["merged"];
	outputFolder: string;
	constructor(options?: Options["parameter"]);
	get isDevelopment(): boolean;
	get isProduction(): boolean;
	get isStatic(): boolean;
	get isWatch(): boolean;
	get pkg(): PackageJson | undefined;
	get rollupConfig(): RollupOptions;
	get tsconfig(): TsConfigJson | undefined;
	addBuilderPlugin(plugin: ConfigBuilderPlugin): void;
	addRollupPlugin<T extends PluginGenerator>(plugin: T, options?: Parameters<T>[0]): void;
	append(key: Key, value: unknown): void;
	appendUnique(key: Key, value: unknown): void;
	build(): Promise<RollupOptions>;
	compile(): Promise<{
		bundle: RollupBuild;
		output: RollupOutput;
	}>;
	fromContextFolder(...pathSegments: Array<string>): string;
	fromOutputFolder(...pathSegments: Array<string>): string;
	get<T extends Key>(key: T): Get<RollupOptions, T>;
	getEnsuredArray(key: Key): unknown[];
	has(key: Key): boolean;
	prepend(key: Key, value: unknown): void;
	prependUnique(key: Key, value: unknown): void;
	set<T extends Key>(key: T, value: Get<RollupOptions, T>): void;
	setDefault<T extends Key>(key: T, value: Get<RollupOptions, T>): void;
}
export declare class ExternalsPlugin implements ConfigBuilderPlugin {
	#private;
	protected options: Options$3["merged"];
	constructor(options?: Options$3["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare class LoadAssetsPlugin implements ConfigBuilderPlugin {
	protected options: Options$4["merged"];
	constructor(options?: Options$4["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare class MinifyPlugin implements ConfigBuilderPlugin {
	#private;
	options: Options$5["merged"];
	constructor(options?: Options$5["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare class PkgPlugin implements ConfigBuilderPlugin {
	options: Options$6["merged"];
	constructor(options?: Options$6["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare class TypescriptPlugin implements ConfigBuilderPlugin {
	#private;
	protected options: Options$7["merged"];
	protected pkg: PackageJson | undefined;
	protected tsconfig: TsConfigJson | undefined;
	constructor(options?: Options$7["parameter"]);
	apply(builder: ConfigBuilder, hooks: Hooks): void;
}
export declare const buildConfig: (options?: ConstructorParameters<typeof ConfigBuilder>[0]) => Promise<import("rollup").RollupOptions>;
interface ConfigBuilderPlugin {
	apply: (configBuilder: ConfigBuilder, hooks: Hooks) => void;
}
type BuiltIns = Primitive | void | Date | RegExp;
type ConsistsOnlyOf<LongString extends string, Substring extends string> = LongString extends "" ? true : LongString extends `${Substring}${infer Tail}` ? ConsistsOnlyOf<Tail, Substring> : false;
type EmptyObject = {
	[emptyObjectSymbol]?: never;
};
type FixPathSquareBrackets<Path extends string> = Path extends `[${infer Head}]${infer Tail}` ? Tail extends `[${string}` ? `${Head}.${FixPathSquareBrackets<Tail>}` : `${Head}${FixPathSquareBrackets<Tail>}` : Path extends `${infer Head}[${infer Middle}]${infer Tail}` ? `${Head}.${FixPathSquareBrackets<`[${Middle}]${Tail}`>}` : Path;
type Get<BaseType, Path extends string | readonly string[], Options extends GetOptions = {}> = GetWithPath<BaseType, Path extends string ? ToPath<Path> : Path, Options>;
type GetOptions = {
	/**
	Include `undefined` in the return type when accessing properties.

	Setting this to `false` is not recommended.

	@default true
	*/
	strict?: boolean;
};
type GetWithPath<BaseType, Keys extends readonly string[], Options extends GetOptions = {}> = Keys extends readonly [
] ? BaseType : Keys extends readonly [
	infer Head,
	...infer Tail
] ? GetWithPath<PropertyOf<BaseType, Extract<Head, string>, Options>, Extract<Tail, string[]>, Options> : never;
type Hooks = typeof ConfigBuilder.prototype.hooks;
type InputOptions<Setup extends InputOptionsSetup = {}> = {
	defaultsType: Setup[`defaultsType`];
	merged: MergeThree<Setup[`defaultsType`], Partial<Setup[`optionalOptions`]>, Setup[`requiredOptions`]>;
	optionalOptions: Partial<Setup[`optionalOptions`]>;
	parameter: MergeThree<Partial<Setup[`defaultsType`]>, Partial<Setup[`optionalOptions`]>, Setup[`requiredOptions`]>;
	requiredOptions: Setup[`requiredOptions`];
};
type InputOptionsSetup = {
	defaultsType?: Record<string, unknown>;
	optionalOptions?: Record<string, unknown>;
	requiredOptions?: Record<string, unknown>;
};
type InternalPaths<_T, T = Required<_T>> = T extends EmptyObject | readonly [
] ? never : {
	[Key in keyof T]: Key extends string | number // Limit `Key` to string or number.
	 ? Key | ToString<Key> | (IsNever<Paths<T[Key]>> extends false ? `${Key}.${Paths<T[Key]>}` : never) : never;
}[keyof T & (T extends UnknownArray ? number : unknown)];
type IsAny<T> = 0 extends 1 & T ? true : false;
type IsNever<T> = [
	T
] extends [
	never
] ? true : false;
type JsonArray = JsonValue[] | readonly JsonValue[];
type JsonObject = {
	[Key in string]: JsonValue;
} & {
	[Key in string]?: JsonValue | undefined;
};
type JsonPrimitive = string | number | boolean | null;
type JsonValue = JsonPrimitive | JsonObject | JsonArray;
type Key = Paths<RollupOptions>;
type LiteralUnion<LiteralType, BaseType extends Primitive> = LiteralType | (BaseType & Record<never, never>);
type Merge<Destination, Source> = Simplify<SimpleMerge<PickIndexSignature<Destination>, PickIndexSignature<Source>> & SimpleMerge<OmitIndexSignature<Destination>, OmitIndexSignature<Source>>>;
type MergeThree<LowPriorityType, MediumPriorityType, HighPriorityType> = Simplify<Merge<LowPriorityType, Merge<MediumPriorityType, HighPriorityType>>>;
type NonRecursiveType = BuiltIns | Function | (new (...arguments_: any[]) => unknown);
type OmitIndexSignature<ObjectType> = {
	[KeyType in keyof ObjectType as {} extends Record<KeyType, unknown> ? never : KeyType]: ObjectType[KeyType];
};
type Options = InputOptions<{
	defaultsType: typeof defaultOptions;
	optionalOptions: {
		plugins: Array<ConfigBuilderPlugin>;
	};
}>;
type Options$1 = InputOptions<{}>;
type Options$10 = InputOptions<{
	defaultsType: typeof defaultOptions$8;
	optionalOptions: {
		extend: PackageJson;
		publishimoOptions: Parameters<typeof publishimo>[0];
	};
}>;
type Options$2 = InputOptions<{}>;
type Options$3 = InputOptions<{
	defaultsType: typeof defaultOptions$1;
}>;
type Options$4 = InputOptions<{
	readonly defaultsType: typeof defaultOptions$2;
	readonly optionalOptions: {
		yamlOptions: false | YamlPluginOptions;
	};
}>;
type Options$5 = InputOptions<{
	defaultsType: typeof defaultOptions$3;
	optionalOptions: {
		terserOptions: TerserOptions;
		terserPluginOptions: TerserPluginOptions;
	};
}>;
type Options$6 = InputOptions<{
	defaultsType: typeof defaultOptions$4;
}>;
type Options$7 = InputOptions<{
	defaultsType: typeof defaultOptions$5;
	optionalOptions: {
		env: "development" | "production";
	};
}>;
type Options$8 = InputOptions<{
	defaultsType: typeof defaultOptions$6;
	optionalOptions: {
		tsConfigFile: string;
	};
}>;
type Options$9 = InputOptions<{
	defaultsType: typeof defaultOptions$7;
	requiredOptions: {
		name: string;
	};
}>;
type PackageJson = JsonObject & PackageJson.NodeJsStandard & PackageJson.PackageJsonStandard & PackageJson.NonStandardEntryPoints & PackageJson.TypeScriptConfiguration & PackageJson.YarnConfiguration & PackageJson.JSPMConfiguration;
type Paths<T> = T extends NonRecursiveType | ReadonlyMap<unknown, unknown> | ReadonlySet<unknown> ? never : IsAny<T> extends true ? never : T extends UnknownArray ? number extends T["length"] ? InternalPaths<StaticPartOfArray<T>> | InternalPaths<Array<VariablePartOfArray<T>[number]>> : InternalPaths<T> : T extends object ? InternalPaths<T> : never;
type PickIndexSignature<ObjectType> = {
	[KeyType in keyof ObjectType as {} extends Record<KeyType, unknown> ? KeyType : never]: ObjectType[KeyType];
};
type PluginGenerator = (options?: unknown) => Plugin;
type Primitive = null | undefined | string | number | boolean | symbol | bigint;
type PropertyOf<BaseType, Key extends string, Options extends GetOptions = {}> = BaseType extends null | undefined ? undefined : Key extends keyof BaseType ? StrictPropertyOf<BaseType, Key, Options> : BaseType extends readonly [
] | readonly [
	unknown,
	...unknown[]
] ? unknown // It's a tuple, but `Key` did not extend `keyof BaseType`. So the index is out of bounds.
 : BaseType extends {
	[n: number]: infer Item;
	length: number; // Note: This is needed to avoid being too lax with records types using number keys like `{0: string; 1: boolean}`.
} ? (ConsistsOnlyOf<Key, StringDigit> extends true ? Strictify<Item, Options> : unknown) : Key extends keyof WithStringKeys<BaseType> ? StrictPropertyOf<WithStringKeys<BaseType>, Key, Options> : unknown;
type SimpleMerge<Destination, Source> = {
	[Key in keyof Destination as Key extends keyof Source ? never : Key]: Destination[Key];
} & Source;
type Simplify<T> = {
	[KeyType in keyof T]: T[KeyType];
} & {};
type Split<S extends string, Delimiter extends string> = S extends `${infer Head}${Delimiter}${infer Tail}` ? [
	Head,
	...Split<Tail, Delimiter>
] : S extends Delimiter ? [
] : [
	S
];
type StaticPartOfArray<T extends UnknownArray, Result extends UnknownArray = [
]> = T extends unknown ? number extends T["length"] ? T extends readonly [
	infer U,
	...infer V
] ? StaticPartOfArray<V, [
	...Result,
	U
]> : Result : T : never;
type StrictPropertyOf<BaseType, Key extends keyof BaseType, Options extends GetOptions> = Record<string, any> extends BaseType ? string extends keyof BaseType ? Strictify<BaseType[Key], Options> // Record<string, any>
 : BaseType[Key] // Record<'a' | 'b', any> (Records with a string union as keys have required properties)
 : BaseType[Key];
type Strictify<Type, Options extends GetOptions> = Options["strict"] extends false ? Type : (Type | undefined);
type StringDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
type StringKeyOf<BaseType> = `${Extract<keyof BaseType, string | number>}`;
type TerserOptions = import("terser").MinifyOptions;
type ToPath<S extends string> = Split<FixPathSquareBrackets<S>, ".">;
type ToString<T> = T extends string | number ? `${T}` : never;
type TsConfigJson = {
	/**
	Instructs the TypeScript compiler how to compile `.ts` files.
	*/
	compilerOptions?: TsConfigJson.CompilerOptions;
	/**
	Instructs the TypeScript compiler how to watch files.
	*/
	watchOptions?: TsConfigJson.WatchOptions;
	/**
	Auto type (.d.ts) acquisition options for this project.
	*/
	typeAcquisition?: TsConfigJson.TypeAcquisition;
	/**
	Enable Compile-on-Save for this project.
	*/
	compileOnSave?: boolean;
	/**
	Path to base configuration file to inherit from.
	*/
	extends?: string | string[];
	/**
	If no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`. When a `files` property is specified, only those files and those specified by `include` are included.
	*/
	files?: string[];
	/**
	Specifies a list of files to be excluded from compilation. The `exclude` property only affects the files included via the `include` property and not the `files` property.

	Glob patterns require TypeScript version 2.0 or later.
	*/
	exclude?: string[];
	/**
	Specifies a list of glob patterns that match files to be included in compilation.

	If no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`.
	*/
	include?: string[];
	/**
	Referenced projects.
	*/
	references?: TsConfigJson.References[];
};
type UncheckedIndex<T, U extends string | number> = [
	T
] extends [
	Record<string | number, any>
] ? T[U] : never;
type UnknownArray = readonly unknown[];
type VariablePartOfArray<T extends UnknownArray> = T extends unknown ? T extends readonly [
	...StaticPartOfArray<T>,
	...infer U
] ? U : [
] : never;
type WithStringKeys<BaseType> = {
	[Key in StringKeyOf<BaseType>]: UncheckedIndex<BaseType, Key>;
};
type YamlPluginOptions = NonNullable<Parameters<typeof yamlPlugin["default"]>[0]>;

export {
	ConfigBuilder as default,
	dtsBundleGeneratorPlugin as dtsBundleGenerator,
	publishimoPlugin as emitFile,
	publishimoPlugin$1 as publishimo,
};

export {};
