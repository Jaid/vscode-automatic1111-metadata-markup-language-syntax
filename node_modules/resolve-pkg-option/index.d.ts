/** @module resolve-pkg-option
 */
declare module "resolve-pkg-option" {
    /**
     * @typedef result
     * @type {object}
     * @property {object} pkg The final pkg data
     * @property {string|false} path The file path where the pkg data got loaded from
     */
    type result = {
        pkg: any;
        path: string | false;
    };
    /**
     * @typedef options
     * @type {object}
     * @property {boolean} [normalize=true] Apply normalize-package-data
     * @property {boolean} [json5=true] Parse package.json with json5
     * @property {boolean} [preventDependencyCopy=true] Prevents `pkg.optionalDependencies` from getting copied to `pkg.dependencies` by normalize-package-data, see: https://github.com/npm/normalize-package-data/issues/91
     */
    type options = {
        normalize?: boolean;
        json5?: boolean;
        preventDependencyCopy?: boolean;
    };
    /**
     * Loads a package.json or prepares given pkg data
     * @param {object|string} pkg Either a path where the package.json is searched at, or pkg data as an object
     * @param {options} options Resolving options
     * @returns {result} Resolving result with package data and an optional file path
     * @example
     * resolvePkgOption({name: " test"})
     * // { path: false, pkg: {name: "test"} }
     * @example
     * resolvePkgOption({name: " test"}, {normalize: false})
     * // { path: false, pkg: {name: " test"} }
     */
    function sync(pkg: any | string, options: options): result;
    /**
     * Loads a package.json or prepares given pkg data
     * @async
     * @function default
     * @param {object|string} pkg Either a path where the package.json is searched at, or pkg data as an object
     * @param {options} options Resolving options
     * @returns {Promise<result>} Resolving result with package data and an optional file path
     * resolvePkgOption({name: " test"})
     * // { path: false, pkg: {name: "test"} }
     * @example
     * resolvePkgOption({name: " test"}, {normalize: false})
     * // { path: false, pkg: {name: " test"} }
     */
    function default(pkg: any | string, options: options): Promise<result>;
}