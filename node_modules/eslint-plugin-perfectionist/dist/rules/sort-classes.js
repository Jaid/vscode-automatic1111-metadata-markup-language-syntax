'use strict'
const sortClassesUtils = require('./sort-classes-utils.js')
const isPartitionComment = require('../utils/is-partition-comment.js')
const getCommentBefore = require('../utils/get-comment-before.js')
const createEslintRule = require('../utils/create-eslint-rule.js')
const getGroupNumber = require('../utils/get-group-number.js')
const getSourceCode = require('../utils/get-source-code.js')
const toSingleLine = require('../utils/to-single-line.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const getSettings = require('../utils/get-settings.js')
const isPositive = require('../utils/is-positive.js')
const useGroups = require('../utils/use-groups.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortClasses = createEslintRule.createEslintRule({
  name: 'sort-classes',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted classes.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          partitionByComment: {
            description:
              'Allows to use comments to separate the nodes into logical groups.',
            anyOf: [
              {
                type: 'array',
                items: {
                  type: 'string',
                },
              },
              {
                type: 'boolean',
              },
              {
                type: 'string',
              },
            ],
          },
          groups: {
            description: 'Specifies the order of the groups.',
            type: 'array',
            items: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
          customGroups: {
            description: 'Specifies custom groups.',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedClassesGroupOrder:
        'Expected "{{right}}" ({{rightGroup}}) to come before "{{left}}" ({{leftGroup}}).',
      unexpectedClassesOrder: 'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      partitionByComment: false,
      groups: [
        'static-block',
        'index-signature',
        'static-property',
        ['protected-property', 'protected-accessor-property'],
        ['private-property', 'private-accessor-property'],
        ['property', 'accessor-property'],
        'constructor',
        'static-method',
        'protected-method',
        'private-method',
        'method',
        ['get-method', 'set-method'],
        'unknown',
      ],
      customGroups: {},
    },
  ],
  create: context => ({
    ClassBody: node => {
      if (node.body.length > 1) {
        let settings = getSettings.getSettings(context.settings)
        let options = complete.complete(context.options.at(0), settings, {
          groups: [
            'static-block',
            'index-signature',
            'static-property',
            ['protected-property', 'protected-accessor-property'],
            ['private-property', 'private-accessor-property'],
            ['property', 'accessor-property'],
            'constructor',
            'static-method',
            'protected-method',
            'private-method',
            'method',
            ['get-method', 'set-method'],
            'unknown',
          ],
          partitionByComment: false,
          type: 'alphabetical',
          ignoreCase: true,
          customGroups: {},
          order: 'asc',
        })
        let sourceCode = getSourceCode.getSourceCode(context)
        let extractDependencies = expression => {
          let dependencies = []
          let checkNode = nodeValue => {
            if (
              nodeValue.type === 'MemberExpression' &&
              nodeValue.object.type === 'ThisExpression' &&
              nodeValue.property.type === 'Identifier'
            ) {
              dependencies.push(nodeValue.property.name)
            }
            if ('body' in nodeValue && nodeValue.body) {
              traverseNode(nodeValue.body)
            }
            if ('left' in nodeValue) {
              traverseNode(nodeValue.left)
            }
            if ('right' in nodeValue) {
              traverseNode(nodeValue.right)
            }
            if ('elements' in nodeValue) {
              nodeValue.elements
                .filter(currentNode => currentNode !== null)
                .forEach(traverseNode)
            }
            if ('arguments' in nodeValue) {
              nodeValue.arguments.forEach(traverseNode)
            }
          }
          let traverseNode = nodeValue => {
            if (Array.isArray(nodeValue)) {
              nodeValue.forEach(traverseNode)
            } else {
              checkNode(nodeValue)
            }
          }
          traverseNode(expression)
          return dependencies
        }
        let overloadSignatureGroups =
          sortClassesUtils.getOverloadSignatureGroups(node.body)
        let formattedNodes = node.body.reduce(
          (accumulator, member) => {
            var _a, _b, _c, _d
            let comment = getCommentBefore.getCommentBefore(member, sourceCode)
            if (
              options.partitionByComment &&
              comment &&
              isPartitionComment.isPartitionComment(
                options.partitionByComment,
                comment.value,
              )
            ) {
              accumulator.push([])
            }
            let name
            let dependencies = []
            let { getGroup, defineGroup, setCustomGroups } =
              useGroups.useGroups(options.groups)
            if (member.type === 'StaticBlock') {
              name = 'static'
            } else if (member.type === 'TSIndexSignature') {
              name = sourceCode.text.slice(
                member.range.at(0),
                ((_a = member.typeAnnotation) == null
                  ? void 0
                  : _a.range.at(0)) ?? member.range.at(1),
              )
            } else {
              if (member.key.type === 'Identifier') {
                ;({ name } = member.key)
              } else {
                name = sourceCode.text.slice(...member.key.range)
              }
            }
            let isPrivateHash =
              'key' in member && member.key.type === 'PrivateIdentifier'
            let decorated =
              'decorators' in member && member.decorators.length > 0
            let modifiers = []
            let selectors = []
            if (
              member.type === 'MethodDefinition' ||
              member.type === 'TSAbstractMethodDefinition'
            ) {
              if (member.static) {
                modifiers.push('static')
              }
              if (member.type === 'TSAbstractMethodDefinition') {
                modifiers.push('abstract')
              }
              if (decorated) {
                modifiers.push('decorated')
              }
              if (member.override) {
                modifiers.push('override')
              }
              if (member.accessibility === 'protected') {
                modifiers.push('protected')
              } else if (member.accessibility === 'private' || isPrivateHash) {
                modifiers.push('private')
              } else {
                modifiers.push('public')
              }
              if (member.optional) {
                modifiers.push('optional')
              }
              if (member.kind === 'constructor') {
                selectors.push('constructor')
              }
              if (member.kind === 'get') {
                selectors.push('get-method')
              }
              if (member.kind === 'set') {
                selectors.push('set-method')
              }
              selectors.push('method')
            } else if (member.type === 'TSIndexSignature') {
              if (member.static) {
                modifiers.push('static')
              }
              if (member.readonly) {
                modifiers.push('readonly')
              }
              selectors.push('index-signature')
            } else if (member.type === 'StaticBlock') {
              selectors.push('static-block')
            } else if (
              member.type === 'AccessorProperty' ||
              member.type === 'TSAbstractAccessorProperty'
            ) {
              if (member.static) {
                modifiers.push('static')
              }
              if (member.type === 'TSAbstractAccessorProperty') {
                modifiers.push('abstract')
              }
              if (decorated) {
                modifiers.push('decorated')
              }
              if (member.override) {
                modifiers.push('override')
              }
              if (member.accessibility === 'protected') {
                modifiers.push('protected')
              } else if (member.accessibility === 'private' || isPrivateHash) {
                modifiers.push('private')
              } else {
                modifiers.push('public')
              }
              selectors.push('accessor-property')
            } else {
              if (member.static) {
                modifiers.push('static')
              }
              if (member.declare) {
                modifiers.push('declare')
              }
              if (member.type === 'TSAbstractPropertyDefinition') {
                modifiers.push('abstract')
              }
              if (decorated) {
                modifiers.push('decorated')
              }
              if (member.override) {
                modifiers.push('override')
              }
              if (member.readonly) {
                modifiers.push('readonly')
              }
              if (member.accessibility === 'protected') {
                modifiers.push('protected')
              } else if (member.accessibility === 'private' || isPrivateHash) {
                modifiers.push('private')
              } else {
                modifiers.push('public')
              }
              if (member.optional) {
                modifiers.push('optional')
              }
              if (
                ((_b = member.value) == null ? void 0 : _b.type) ===
                  'ArrowFunctionExpression' ||
                ((_c = member.value) == null ? void 0 : _c.type) ===
                  'FunctionExpression'
              ) {
                selectors.push('function-property')
              }
              selectors.push('property')
            }
            for (let officialGroup of sortClassesUtils.generateOfficialGroups(
              modifiers,
              selectors,
            )) {
              defineGroup(officialGroup)
            }
            setCustomGroups(options.customGroups, name, {
              override: true,
            })
            if (member.type === 'PropertyDefinition' && member.value) {
              dependencies = extractDependencies(member.value)
            }
            let overloadSignatureGroupMember =
              (_d = overloadSignatureGroups.find(overloadSignatures =>
                overloadSignatures.includes(member),
              )) == null
                ? void 0
                : _d.at(-1)
            let value = {
              size: overloadSignatureGroupMember
                ? rangeToDiff.rangeToDiff(overloadSignatureGroupMember.range)
                : rangeToDiff.rangeToDiff(member.range),
              group: getGroup(),
              node: member,
              dependencies,
              name,
            }
            accumulator.at(-1).push(value)
            return accumulator
          },
          [[]],
        )
        for (let nodes of formattedNodes) {
          pairwise.pairwise(nodes, (left, right) => {
            let leftNum = getGroupNumber.getGroupNumber(options.groups, left)
            let rightNum = getGroupNumber.getGroupNumber(options.groups, right)
            let isLeftOrRightIgnored =
              leftNum === options.groups.length ||
              rightNum === options.groups.length
            if (
              !isLeftOrRightIgnored &&
              (leftNum > rightNum ||
                (leftNum === rightNum &&
                  isPositive.isPositive(compare.compare(left, right, options))))
            ) {
              context.report({
                messageId:
                  leftNum !== rightNum
                    ? 'unexpectedClassesGroupOrder'
                    : 'unexpectedClassesOrder',
                data: {
                  left: toSingleLine.toSingleLine(left.name),
                  leftGroup: left.group,
                  right: toSingleLine.toSingleLine(right.name),
                  rightGroup: right.group,
                },
                node: right.node,
                fix: fixer => {
                  let nodesByNonIgnoredGroupNumber = {}
                  let ignoredNodeIndices = []
                  for (let [index, sortingNode] of nodes.entries()) {
                    let groupNum = getGroupNumber.getGroupNumber(
                      options.groups,
                      sortingNode,
                    )
                    if (groupNum === options.groups.length) {
                      ignoredNodeIndices.push(index)
                      continue
                    }
                    nodesByNonIgnoredGroupNumber[groupNum] =
                      nodesByNonIgnoredGroupNumber[groupNum] ?? []
                    nodesByNonIgnoredGroupNumber[groupNum].push(sortingNode)
                  }
                  let sortedNodes = []
                  for (let groupNumber of Object.keys(
                    nodesByNonIgnoredGroupNumber,
                  ).sort((a, b) => Number(a) - Number(b))) {
                    sortedNodes.push(
                      ...sortNodes.sortNodes(
                        nodesByNonIgnoredGroupNumber[Number(groupNumber)],
                        options,
                      ),
                    )
                  }
                  for (let ignoredIndex of ignoredNodeIndices) {
                    sortedNodes.splice(ignoredIndex, 0, nodes[ignoredIndex])
                  }
                  return makeFixes.makeFixes(
                    fixer,
                    nodes,
                    sortedNodes,
                    sourceCode,
                    {
                      partitionComment: options.partitionByComment,
                    },
                  )
                },
              })
            }
          })
        }
      }
    },
  }),
})
module.exports = sortClasses
