import { FormatInputPathObject, ParsedPath } from 'node:path';

export declare const addPrefix: typeof extra["addPrefix"];
export declare const addSuffix: typeof extra["addSuffix"];
export declare const basename: (fileOrFolder: string, suffix?: string) => string;
export declare const cleanPath: (fileOrFolder: string) => string;
export declare const dirname: (fileOrFolder: string) => string;
export declare const enforceForwardSlashes: (fileOrFolder: string) => string;
export declare const extension: (fileOrFolder: string) => string | undefined;
export declare const extname: (fileOrFolder: string) => string;
export declare const folderFromUrl: typeof urlUtil["folderFromUrl"];
export declare const format: (fileOrFolderObject: FormatInputPathObject) => string;
export declare const fromAppdataLocal: typeof paths["fromAppdataLocal"];
export declare const fromAppdataRoaming: typeof paths["fromAppdataRoaming"];
export declare const fromHome: typeof paths["fromHome"];
export declare const fromTemp: typeof paths["fromTemp"];
export declare const hasSlash: (fileOrFolder: string) => boolean;
export declare const indexAfterParent: (fileOrFolder: string) => number | undefined;
export declare const indexBeforeExtension: (fileOrFolder: string) => number | undefined;
export declare const indexBeforeName: (fileOrFolder: string) => number;
export declare const isAbsolute: (fileOrFolder: string) => boolean;
export declare const isDotFile: (fileOrFolder: string) => boolean;
export declare const isName: (fileOrFolder: string) => boolean;
export declare const join: (...pathSegments: Array<string>) => string;
export declare const normalize: (fileOrFolder: string) => string;
export declare const parentName: (fileOrFolder: string) => string | undefined;
export declare const parse: (fileOrFolder: string) => ParsedPath;
export declare const path: Path;
export declare const relative: (from: string, to: string) => string;
export declare const replaceExtension: typeof extra["replaceExtension"];
export declare const replaceStem: typeof extra["replaceStem"];
export declare const resolve: (...pathSegments: Array<string>) => string;
export declare const stem: (fileOrFolder: string) => string;
export declare const toNamespacedPath: (fileOrFolder: string) => string;
export declare const withoutExtension: typeof extra["withoutExtension"];
type Path = ((fileOrFolder: string) => string) & typeof lib;

export {
	path as default,
};

export {};
